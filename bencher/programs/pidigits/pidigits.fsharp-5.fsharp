(**
 * The Computer Language Benchmarks Game
 * https://salsa.debian.org/benchmarksgame-team/benchmarksgame/
 *
 * Port to F# by Jomo Fisher of the C# port that uses native GMP:
 * 	contributed by Mike Pall
 * 	java port by Stefan Krause
 *  C# port by Miguel de Icaza
 * F#-Idiomatization by François-David Collin
*)

open System.Runtime.InteropServices

[<Struct; StructLayout(LayoutKind.Sequential)>]
type MPZ =
   val _mp_alloc:int
   val _mp_size:int
   val ptr:System.IntPtr

[<DllImport ("gmp",EntryPoint="__gmpz_init",ExactSpelling=true)>]
extern void mpzInit(MPZ& _value)

[<DllImport ("gmp",EntryPoint="__gmpz_mul_si",ExactSpelling=true)>]
extern void mpzMul(MPZ& _dest, MPZ&_src, int _value)

[<DllImport ("gmp",EntryPoint="__gmpz_add",ExactSpelling=true)>]
extern void mpzAdd(MPZ& _dest, MPZ& _src, MPZ& _src2)

[<DllImport ("gmp",EntryPoint="__gmpz_tdiv_q",ExactSpelling=true)>]
extern void mpzTdiv(MPZ& _dest, MPZ& _src, MPZ& _src2)

[<DllImport ("gmp",EntryPoint="__gmpz_set_si",ExactSpelling=true)>]
extern void mpzSet(MPZ& _src, int _value)

[<DllImport ("gmp",EntryPoint="__gmpz_get_si",ExactSpelling=true)>]
extern int mpzGet(MPZ& _src)

let inline init() =
    let mutable result = MPZ()
    mpzInit(&result)
    result

let mutable q = init()
let mutable r = init()
let mutable s = init()
let mutable t = init()
let mutable u = init()
let mutable v = init()
let mutable w = init()

mpzSet(&q, 1)
mpzSet(&r, 0)
mpzSet(&s, 0)
mpzSet(&t, 1)

let inline composeR bq br bs bt =
    mpzMul(&u, &r, bs)
    mpzMul(&r, &r, bq)
    mpzMul(&v, &t, br)
    mpzAdd(&r, &r, &v)
    mpzMul(&t, &t, bt)
    mpzAdd(&t, &t, &u)
    mpzMul(&s, &s, bt)
    mpzMul(&u, &q, bs)
    mpzAdd(&s, &s, &u)
    mpzMul(&q, &q, bq)

let inline composeL bq br bs bt =
    mpzMul(&r, &r, bt)
    mpzMul(&u, &q, br)
    mpzAdd(&r, &r, &u)
    mpzMul(&u, &t, bs)
    mpzMul(&t, &t, bt)
    mpzMul(&v, &s, br)
    mpzAdd(&t, &t, &v)
    mpzMul(&s, &s, bq)
    mpzAdd(&s, &s, &u)
    mpzMul(&q, &q, bq)

let inline extract j =
    mpzMul(&u, &q, j)
    mpzAdd(&u, &u, &r)
    mpzMul(&v, &s, j)
    mpzAdd(&v, &v, &t)
    mpzTdiv(&w, &u, &v)
    mpzGet(&w)

let rec str k =
    seq {
        let y = extract 3
        match y with
        | y when y = extract 4 -> composeR 10 (-10*y) 0 1
                                  yield y; yield! str k
        | _                    -> composeL k (4*k+2) 0 (2*k+1)
                                  yield! str (k+1)
    }

    
[<EntryPoint>]
let main args =
    let n = try int args.[0] with _ -> 27
    str 1
    |> Seq.take n
    |> Seq.map (fun y -> char (48 + y))
    |> Seq.chunkBySize 10
    |> Seq.scan (fun (s,_) l -> let s = s + Array.length l
                                (s,sprintf "%-10s\t:%d\n" (System.String l) s)) (0,"")
    |> Seq.iter (snd >> System.Console.Write)
    0
