/* The Computer Language Benchmarks Game
 * https://salsa.debian.org/benchmarksgame-team/benchmarksgame/
 *
 * Original C contributed by Sebastien Loisel
 * Conversion to C++ by Jon Harrop
 * OpenMP parallelize by The Anh Tran
 * Add SSE by The Anh Tran
 * Reconversion into C by Dan Farina
 */

@"#define _GNU_SOURCE"
import "omp.h"
import "math.h"
import "sched.h"
import "stdio.h"
import "stdlib.h"

let false = 0, true = 1;

/* define SIMD data type. 2 doubles encapsulated in one XMM register */
type v2dt = __attribute__(double,vector_size(16));
let v1 = v2dt {1.0, 1.0};

/* parameter for evaluate functions */
struct Param {
    u: &double,         /* source vector */
    tmp: &double,        /* temporary */
    v: &double,          /* destination vector */

    N: i32,              /* source/destination vector length */
    N2: i32,             /* = N/2 */

    r_begin: i32,        /* working range of each thread */
    r_end: i32
};

/* Return: 1.0 / (i + j) * (i + j +1) / 2 + i + 1; */
fun eval_A(i: i32, j: i32) {
    /*
     * 1.0 / (i + j) * (i + j +1) / 2 + i + 1;
     * n * (n+1) is even number. Therefore, just (>> 1) for (/2)
     */
    let d = (((i+j) * (i+j+1)) >> 1) + i+1;

    return 1.0 / d;
}

/*
 * Return type: 2 doubles in xmm register [double1, double2]
 *  double1 = 1.0 / (i + j) * (i + j +1) / 2 + i + 1;
 *  double2 = 1.0 / (i+1 + j) * (i+1 + j +1) / 2 + i+1 + 1;
 */
fun eval_A_i(i: i32, j: i32) -> v2dt {
    let d1 = (((i+j) * (i+j+1)) >> 1) + i+1;
    let d2 = (((i+1 +j) * (i+1 +j+1)) >> 1) + (i+1) +1;
    let r = v2dt {d1, d2};

    return v1 / r;
}

/*
 * Return type: 2 doubles in xmm register [double1, double2]
 *  double1 = 1.0 / (i + j) * (i + j +1) / 2 + i + 1;
 *  double2 = 1.0 / (i + j+1) * (i + j+1 +1) / 2 + i + 1;
 */
fun eval_A_j(i: i32, j: i32) -> v2dt {
    let d1 = (((i+j) * (i+j+1)) >> 1) + i+1;
    let d2 = (((i+ j+1) * (i+ j+1 +1)) >> 1) + i+1;
    let r = v2dt {d1, d2};

    return v1 / r;
}


/* This function is called by many threads */
fun eval_A_times_u(p: &Param) -> v2dt {
    /* alias of source vector */
    let pU: &v2dt = p.u as &void;
    let ie, i;

    for ({i = p.r_begin; ie = p.r_end;}; i < ie; i++) {
        let sum = v2dt {0, 0};

        let j;
        /* xmm = 2 doubles. This loop run from [0 .. N/2) */
        for (j = 0; j < p.N2; j++) {
            sum += pU[j] * eval_A_j(i, j*2);
        }

        /* write result */
        {
            let mem: &double = (&sum) as &void;

            p.tmp[i] = mem[0] + mem[1];
        }

        /* If source vector is odd size. This should be called <= 1 time */
        for (j = j*2; __builtin_expect(j < p.N, false); j++) {
            p.tmp[i] += eval_A(i, j) * p.u[j];
        }
    }
}

fun eval_At_times_u(p: &Param) {
    let pT: &v2dt = p.tmp as &void;
    let i, ie;

    for ({i = p.r_begin; ie = p.r_end;}; i < ie; i++) {
        let sum = v2dt {0, 0};

        let j;
        for (j = 0; j < p.N2; j++) {
            sum += pT[j] * eval_A_i(j*2, i);
        }

        {
            let mem: &double = (&sum) as &void;

            p.v[i] = mem[0] + mem[1];
        }

        /* odd size array */
        for (j = j*2; __builtin_expect(j < p.N, false); j++) {
            p.v[i] += eval_A(j, i) * p.tmp[j];
        }
    }
}

/*
 * Called by N threads.
 *
 * Each thread modifies its portion in destination vector -> barrier needed to
 * sync access
 */
fun eval_AtA_times_u(p: &Param) {
    eval_A_times_u(p);
    pragma "omp barrier"

    eval_At_times_u(p);
    pragma "omp barrier"
}

/*
 * Shootout bench uses affinity to emulate single core processor.  This
 * function searches for appropriate number of threads to spawn.
 */
fun GetThreadCount() {
    let cs;
    let i, count = 0;

    @"CPU_ZERO(&cs);"
    sched_getaffinity(0, sizeof(cs), &cs);

    for (i = 0; i < 16; i++) {
        if (CPU_ISSET(i, &cs)) {
            count++;
        }
    }

    return count;
}

fun spectral_game(N: i32) {
    let u, tmp, v: [double;N];

    let vBv = 0.0, vv = 0.0;

pragma "omp parallel default(shared) num_threads(GetThreadCount())"
    {
        let i;

pragma "omp for schedule(static)"
        for (i = 0; i < N; i++) {
            u[i] = 1.0;
        }

        /*
         * this block will be executed by NUM_THREADS variable declared in this
         * block is private for each thread
         */
        let threadid    = omp_get_thread_num();
        let threadcount = omp_get_num_threads();
        let chunk       = N / threadcount;
        let ite;
        let my_param: Param;

        my_param.tmp = tmp;
        my_param.N   = N;
        my_param.N2  = N/2;

        /*
         * calculate each thread's working range [range1 .. range2) => static
         * schedule here
         */
        my_param.r_begin   = threadid * chunk;
        my_param.r_end  = (threadid < (threadcount -1)) ?
            (my_param.r_begin + chunk) : N;

        for (ite = 0; ite < 10; ite++) {
            my_param.u = u;     /* source vec is u */
            my_param.v = v;     /* destination vec is v */
            eval_AtA_times_u(&my_param);

            my_param.u = v;     /* source is v */
            my_param.v = u;     /* destination is u */
            eval_AtA_times_u(&my_param);
        }

        /* multi thread adding */
        {
            let i;

pragma "omp for schedule(static) reduction( + : vBv, vv ) nowait"

            for (i = 0; i < N; i++) {
                vv  += v[i] * v[i];
                vBv += u[i] * v[i];
            }
        }
    }
    /* end parallel region */

    return sqrt(vBv/vv);
}

pub fun main(argc: i32, argv: [[char]]) {
    let N = ((argc >= 2) ? atoi(argv[1]) : 2000);

    printf("%.9f\n", spectral_game(N));
    return 0;
}
