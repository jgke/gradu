/* The Computer Language Benchmarks Game
   https://salsa.debian.org/benchmarksgame-team/benchmarksgame/
 
   contributed by Isaac Gouy 
   modified by Josh Goldfoot, based on the Java version by The Anh Tran
   modified by Jan de Vaan 
   
*/

using System; 
using System.Runtime.CompilerServices;
using System.Threading;

namespace SpectralNorms
{
    unsafe class SpectralNorm
    {
        public static void Main(String[] args)
        { 
            int n = 5500;
            if (args.Length > 0) n = Int32.Parse(args[0]);

            Console.WriteLine("{0:f9}", spectralnormGame(n));  
        }

        private static double spectralnormGame(int n)
        {
            double[] u = new double[n];
            double[] v = new double[n];
            double[] tmp = new double[n];

            // create unit vector
            for (int i = 0; i < n; i++)
                u[i] = 1.0;

            int nthread = Environment.ProcessorCount;
            int chunk = (n + nthread -1) / nthread;
            
            var barrier = new Barrier(nthread);
            Approximate[] ap = new Approximate[nthread];

            for (int i = 0; i < nthread; i++)
            {
                int r1 = i * chunk;
                int r2 = (i < (nthread - 1)) ? r1 + chunk : n;
                ap[i] = new Approximate(u, v, tmp, r1, r2, barrier, i != 0);
            }
            ap[0].run();

            double vBv = 0, vv = 0;
            for (int i = 0; i < nthread; i++)
            { 
                vBv += ap[i].m_vBv;
                vv += ap[i].m_vv;
            }

            return Math.Sqrt(vBv / vv);
        }

    }

    public class Approximate
    {
        private Barrier barrier;
        public Thread t;

        private double[] _u;
        private double[] _v;
        private double[] _tmp;
        private readonly int _arrayLength;
        private readonly int range_begin, range_end;
        public double m_vBv, m_vv;

        public Approximate(double[] u, double[] v, double[] tmp, 
                int rbegin, int rend, Barrier b, bool startThread)
        {
            _arrayLength = u.Length;
            m_vBv = 0;
            m_vv = 0;
            _u = u;
            _v = v;
            _tmp = tmp;
            range_begin = rbegin;
            range_end = rend;
            barrier = b;

            if (startThread)
            {
                t = new Thread(() => run());
                t.Start();
            }
            
        }

        public unsafe void run()
        {
            fixed (double* u = _u)
            fixed (double* v = _v)
            fixed (double* tmp = _tmp)
            {
                // 20 steps of the power method
                for (int i = 0; i < 10; i++)
                {
                    MultiplyAvAtv(u, v, tmp);
                    MultiplyAvAtv(v, u, tmp);
                 }
            }

            for (int i = range_begin; i < range_end; i++)
            {
                m_vBv += _u[i] * _v[i];
                m_vv += _v[i] * _v[i];
            }
            barrier.SignalAndWait();
        }

        private unsafe void MultiplyAvAtv(double* u, double* v, double* tmp)
        {
            MultiplyAv(u, tmp);
            barrier.SignalAndWait();
            MultiplyAtv(tmp, v);
            barrier.SignalAndWait();
        }

        /* return reciprocal of element i,j of infinite matrix A */
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        private static int eval_Arcp(int i, int j)
        { 
            return (i + j) * (i + j + 1) / 2 + i + 1;
        }


        /* multiply vector v by matrix A, each thread evaluate its range only */
        private unsafe void MultiplyAv(double * v, double*  Av)
        {
            for (int i = range_begin; i < range_end; i++)
            {
                double sum = 0;

                int evenLength = _arrayLength & ~1;
                for (int j = 0; j < evenLength; j+=2)
                {
                    sum += v[j] / eval_Arcp(i, j);
                    sum += v[j + 1] / eval_Arcp(i, j + 1);
                }

                if (evenLength != _arrayLength)
                {
                    sum += v[evenLength] / eval_Arcp(i, evenLength);
                }

                Av[i] = sum;
            }
        }

        /* multiply vector v by matrix A transposed */
        private unsafe void MultiplyAtv(double* v, double* Atv)
        {
            for (int i = range_begin; i < range_end; i++)
            {
                double sum =0;
                int evenLength = _arrayLength & ~1;
                for (int j = 0; j < evenLength; j+=2)
                {
                    sum += v[j] / eval_Arcp(j, i);
                    sum += v[j+ 1] / eval_Arcp(j+1, i);
                }
                 
                if (evenLength != _arrayLength)
                {
                    sum += v[evenLength] / eval_Arcp(evenLength, i);
                }

                Atv[i] = sum;
            }
        } 
    }
}
