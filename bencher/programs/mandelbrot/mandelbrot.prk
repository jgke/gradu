// The Computer Language Benchmarks Game
// https://salsa.debian.org/benchmarksgame-team/benchmarksgame/
//
// Contributed by Kevin Miller
//
// ver 2: added a couple of optimizations
// - Reduced number of times a vector of 8 was checked to see if
//    they had all escaped, similar to Dominic Letz's C #5 entry.
// - Processed 64 pixels at a time if width was a multiple of 64,
//    thereby reducing writes to the bitmap.
//
// compile with following gcc flags
//  -pipe -Wall -O3 -ffast-math -fno-finite-math-only -march=native -mfpmath=sse -msse3 -fopenmp

import "stdlib.h";
import "stdio.h";
import "unistd.h";
import "emmintrin.h";

fun numDigits(n: i64) -> i64 {
    let len: i64 = 0;
    while n {
        n = n/10;
        len++;
    }
    return len;
}

fun inline vec_nle(v: &__m128d, f: double) -> i64 {
    return (v[0][0] <= f ||
        v[0][1] <= f ||
        v[1][0] <= f ||
        v[1][1] <= f ||
        v[2][0] <= f ||
        v[2][1] <= f ||
        v[3][0] <= f ||
        v[3][1] <= f) ? 0 : -1;
}

fun inline clrPixels_nle(v: &__m128d, f: double, pix8: &u64)
{
    if(!(v[0][0] <= f)) { *pix8 &= 0b0111_1111; }
    if(!(v[0][1] <= f)) { *pix8 &= 0b1011_1111; }
    if(!(v[1][0] <= f)) { *pix8 &= 0b1101_1111; }
    if(!(v[1][1] <= f)) { *pix8 &= 0b1110_1111; }
    if(!(v[2][0] <= f)) { *pix8 &= 0b1111_0111; }
    if(!(v[2][1] <= f)) { *pix8 &= 0b1111_1011; }
    if(!(v[3][0] <= f)) { *pix8 &= 0b1111_1101; }
    if(!(v[3][1] <= f)) { *pix8 &= 0b1111_1110; }
}

fun inline calcSum(r: &__m128d, i: &__m128d, sum: &__m128d, init_r: &__m128d, init_i: __m128d) {
    for(let pair: i64 = 0; pair<4; pair++) {
        let r2: __m128d = r[pair] * r[pair];
        let i2: __m128d = i[pair] * i[pair];
        let ri: __m128d = r[pair] * i[pair];

        sum[pair] = r2 + i2;

        r[pair]= r2 - i2 + init_r[pair];
        i[pair]= ri + ri + init_i;
    }
}

fun inline mand8(init_r: &__m128d, init_i: __m128d) -> u64 {
    let r: [__m128d;4];
    let i: [__m128d;4];
    let sum: [__m128d;4];
    for(let pair: i64 =0; pair<4; pair++) {
        r[pair]=init_r[pair];
        i[pair]=init_i;
    }

    let pix8: u64 = 0xff;

    for (let j: i64 = 0; j < 6; j++)
    {
        for(let k: i64 = 0; k<8; k++) {
            calcSum(r, i, sum, init_r, init_i);
        }

        if (vec_nle(sum, 4.0))
        {
            pix8 = 0x00;
            break;
        }
    }
    if (pix8)
    {
        calcSum(r, i, sum, init_r, init_i);
        calcSum(r, i, sum, init_r, init_i);
        clrPixels_nle(sum, 4.0, &pix8);
    }

    return pix8;
}

fun mand64(init_r: &__m128d, init_i: __m128d) -> u64 {
    let pix64: u64 = 0;

    for(let byte: i64 =0; byte<8; byte++)
    {
        let pix8: u64 = mand8(init_r, init_i);

        pix64 = (pix64 >> 8) | (pix8 << 56);
        init_r += 4;
    }

    return pix64;
}

fun main(argc: i32, argv: [[char]]) {
    // get width/height from arguments

    let wid_ht: i64 = 16000;
    if (argc >= 2) {
        wid_ht = atoi(argv[1]);
    }
    wid_ht = (wid_ht+7) & ~7;


    // allocate memory for header and pixels

    let headerLength: i64 = numDigits(wid_ht)*2+5;
    let pad: i64 = ((headerLength + 7) & ~7) - headerLength; // pad aligns pixels on 8
    let dataLength: i64 = headerLength + (wid_ht*(wid_ht>>3));
    let buffer = malloc((pad + dataLength) as u64) as &?u8;
    let header = buffer + pad;
    let pixels = header + headerLength;

    // generate the bitmap header

    sprintf(header as &char, "P4\n%ld %ld\n", wid_ht, wid_ht);

    // calculate initial values, store in r0, i0

    let r0: [__m128d;wid_ht/2];
    let i0: [double;wid_ht];

    for(let xy=0; xy<wid_ht; xy+=2)
    {
        r0[xy>>1] = 2.0
            / wid_ht as double
            * __m128d { xy as double, (xy+1) as double }
            - 1.5;
        i0[xy] = 2.0
            / wid_ht as double
            *  xy as double
            - 1.0;
        i0[xy+1] = 2.0
            / wid_ht as double
            * (xy + 1) as double
            - 1.0;
    }


    // generate the bitmap

    let use8 = wid_ht%64;
    if use8 {
        pragma "omp parallel for schedule(guided)"
        for(let y: i64 = 0; y < wid_ht; y++) {
            let init_i: __m128d = __m128d { i0[y], i0[y] };
            let rowstart: i64  = y * wid_ht/8;
            for(let x: i64 = 0; x < wid_ht; x+=8) {
                pixels[rowstart + x/8] = mand8(r0 + x/2, init_i) as u8;
            }
        }
    } else {
        pragma "omp parallel for schedule(guided)"
        for(let y: i64 = 0; y < wid_ht; y++) {
            let init_i: __m128d = __m128d { i0[y], i0[y] };
            let rowstart: i64  = y*wid_ht/64;
            for(let x: i64 = 0; x < wid_ht; x += 64) {
                (pixels as [u64])[rowstart + x/64] = mand64(r0 + x/2, init_i);
            }
        }
    }

    // write the data

    let ret = write(1, header as &void, dataLength as u64);

    free(buffer as &void);

    return 0;
}
