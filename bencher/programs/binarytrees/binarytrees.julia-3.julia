# The Computer Language Benchmarks Game
# https://salsa.debian.org/benchmarksgame-team/benchmarksgame/

# contributed by Jarret Revels and Alex Arslan
# based on an OCaml program
# *reset*
#
# modified by Michal Stransky:
#  - made trees immutable as there is no mutation of trees in the program
#  - removed subtyping from the tree definition
#       (usually slower then union types)
#
# modified by Jens Adam for multiprocessing

using Printf
using Distributed

@everywhere struct Node
    left::Union{Node,Nothing}
    right::Union{Node,Nothing}
end

@everywhere @inline function make(d)
    if d == 0
        Node(nothing, nothing)
    else
        Node(make(d - 1), make(d - 1))
    end
end

@everywhere @inline function check(t::Node)
    if isnothing(t.left)
        return 1
    else
        return check(t.left::Node) + 1 + check(t.right::Node)
    end
end

function loop_depths(d::Int64, min_depth, max_depth)
    for i = 0:div(max_depth - d, 2)
        niter = 1 << (max_depth - d + min_depth)
        c = @distributed (+) for j = 1:niter
            check(make(d))
        end
        @printf("%i\t trees of depth %i\t check: %i\n", niter, d, c)
        d += 2
    end
end

function perf_binary_trees(N::Int = 10)
    min_depth = 4
    max_depth = N
    stretch_depth = max_depth + 1

    # create and check stretch tree
    let c = check(make(stretch_depth))
        @printf("stretch tree of depth %i\t check: %i\n", stretch_depth, c)
    end

    long_lived_tree = make(max_depth)

    loop_depths(min_depth, min_depth, max_depth)
    @printf("long lived tree of depth %i\t check: %i\n",
            max_depth, check(long_lived_tree))
end

n = parse(Int, ARGS[1])
perf_binary_trees(n)
