<span class="slc">// The Computer Language Benchmarks Game</span>
<span class="slc">// https://salsa.debian.org/benchmarksgame-team/benchmarksgame/</span>
<span class="slc">//</span>
<span class="slc">// contributed by Jeremy Zerfas</span>
<span class="slc">// rewritten by Аноним Легионов, inspired by fasta Rust #2 program</span>
<span class="slc">// use two OpenMP locks instead of one critical section</span>
<span class="slc">// decouples IO activity from random number generation</span>


<span class="slc">// This controls the width of lines that are output by this program.</span>
<span class="ppc">#define MAXIMUM_LINE_WIDTH	60</span>

<span class="slc">// This program will generate the random nucleotide sequences in parallel which</span>
<span class="slc">// are worked on in blocks of lines. The number of lines in those blocks is</span>
<span class="slc">// controlled by this setting.</span>
<span class="ppc">#define LINES_PER_BLOCK 1024</span>

<span class="ppc">#define CHARACTERS_PER_BLOCK (MAXIMUM_LINE_WIDTH*LINES_PER_BLOCK)</span>

<span class="ppc">#define THREADS_TO_USE 4</span>

<span class="ppc">#include &lt;stdint.h&gt;</span>
<span class="ppc">#include &lt;string.h&gt;</span>
<span class="ppc">#include &lt;stdio.h&gt;</span>
<span class="ppc">#include &lt;stdlib.h&gt;</span>

<span class="ppc">#ifdef _OPENMP</span>
<span class="ppc">#include &lt;omp.h&gt;</span>
<span class="ppc">#endif</span>

<span class="slc">// intptr_t should be the native integer type on most sane systems.</span>
<span class="kwc">typedef</span> <span class="kwb">intptr_t</span> intnative_t;

<span class="kwc">typedef</span> <span class="kwb">struct</span>
{
    <span class="kwb">char</span> letter;
    <span class="kwb">float</span> probability;
} nucleotide_info;


<span class="slc">// Repeatedly print string_To_Repeat until it has printed</span>
<span class="slc">// number_Of_Characters_To_Create. The output is also wrapped to</span>
<span class="slc">// MAXIMUM_LINE_WIDTH columns.</span>
<span class="kwb">static void</span> <span class="kwd">repeat_And_Wrap_String</span>(<span class="kwb">const char</span> string_To_Repeat[],
                                   <span class="kwb">const</span> intnative_t number_Of_Characters_To_Create)
{
    <span class="kwb">const</span> intnative_t string_To_Repeat_Length=<span class="kwd">strlen</span>(string_To_Repeat);

    <span class="slc">// Create an extended_String_To_Repeat which is a copy of string_To_Repeat</span>
    <span class="slc">// but extended with another copy of the first MAXIMUM_LINE_WIDTH characters</span>
    <span class="slc">// of string_To_Repeat appended to the end. Later on this allows us to</span>
    <span class="slc">// generate a line of output just by doing simple memory copies using an</span>
    <span class="slc">// appropriate offset into extended_String_To_Repeat.</span>
    <span class="kwb">char</span> extended_String_To_Repeat[string_To_Repeat_Length+MAXIMUM_LINE_WIDTH];
    <span class="kwa">for</span>(intnative_t column=<span class="num">0</span>; column&lt;string_To_Repeat_Length+MAXIMUM_LINE_WIDTH;
            column++)
        extended_String_To_Repeat[column]=
            string_To_Repeat[column%string_To_Repeat_Length];
    intnative_t offset=<span class="num">0</span>;

    <span class="kwb">char</span> line[MAXIMUM_LINE_WIDTH+<span class="num">1</span>];
    line[MAXIMUM_LINE_WIDTH]=<span class="str">&apos;</span><span class="esc">\n</span><span class="str">&apos;</span>;

    <span class="kwa">for</span>(intnative_t current_Number_Of_Characters_To_Create=
                number_Of_Characters_To_Create;
            current_Number_Of_Characters_To_Create&gt;<span class="num">0</span>;)
    {
        <span class="slc">// Figure out the length of the line we need to write. If it&apos;s less than</span>
        <span class="slc">// MAXIMUM_LINE_WIDTH then we also need to add a line feed in the right</span>
        <span class="slc">// spot too.</span>
        intnative_t line_Length=MAXIMUM_LINE_WIDTH;
        <span class="kwa">if</span>(current_Number_Of_Characters_To_Create&lt;MAXIMUM_LINE_WIDTH)
        {
            line_Length=current_Number_Of_Characters_To_Create;
            line[line_Length]=<span class="str">&apos;</span><span class="esc">\n</span><span class="str">&apos;</span>;
        }

        <span class="kwd">memcpy</span>(line, extended_String_To_Repeat+offset, line_Length);

        <span class="slc">// Update the offset, reducing it by string_To_Repeat_Length if</span>
        <span class="slc">// necessary.</span>
        offset+=line_Length;
        <span class="kwa">if</span>(offset&gt;string_To_Repeat_Length)
            offset-=string_To_Repeat_Length;

        <span class="slc">// Output the line to stdout and update the</span>
        <span class="slc">// current_Number_Of_Characters_To_Create.</span>
        <span class="kwd">fwrite</span>(line, line_Length+<span class="num">1</span>, <span class="num">1</span>, stdout);
        current_Number_Of_Characters_To_Create-=line_Length;
    }
}


<span class="slc">// Generate a pseudorandom number from 0 to max using a linear</span>
<span class="slc">// congruential generator.</span>
<span class="ppc">#define IM		139968</span>
<span class="ppc">#define IA		3877</span>
<span class="ppc">#define IC		29573</span>
<span class="kwb">uint32_t</span> seed=<span class="num">42</span>;

<span class="kwb">int</span> rng_tid; <span class="slc">//Thread ID</span>
<span class="kwb">int</span> rng_tnum = <span class="num">1</span>; <span class="slc">//Thread number</span>
intnative_t rng_cnt = <span class="num">0</span>;

<span class="ppc">#ifdef _OPENMP</span>
omp_lock_t rng_lock;
<span class="ppc">#define RNG_LOCK_INIT() omp_init_lock(&amp;rng_lock)</span>
<span class="ppc">#define RNG_LOCK() omp_set_lock(&amp;rng_lock)</span>
<span class="ppc">#define RNG_FREE() omp_unset_lock(&amp;rng_lock)</span>
<span class="ppc">#else</span>
<span class="ppc">#define RNG_LOCK_INIT() do{}while(0)</span>
<span class="ppc">#define RNG_LOCK() do{}while(0)</span>
<span class="ppc">#define RNG_FREE() do{}while(0)</span>
<span class="ppc">#endif</span>

<span class="kwb">static void</span> <span class="kwd">rng_init</span>(<span class="kwb">void</span>)
{
    <span class="kwd">RNG_LOCK_INIT</span>();
    rng_tid = <span class="num">0</span>;
}

<span class="kwb">static</span> intnative_t <span class="kwd">rng_gen_blk</span>(<span class="kwb">uint32_t</span> * buf, intnative_t len, <span class="kwb">int</span> curr_tid)
{
    intnative_t gen_cnt = -<span class="num">1</span>;<span class="slc">//Error by default</span>
    <span class="kwd">RNG_LOCK</span>();

    <span class="kwa">if</span>( rng_tid == curr_tid )
    {
        <span class="kwa">if</span>( ++rng_tid &gt;= rng_tnum )
        {
            rng_tid = <span class="num">0</span>;
        }

        gen_cnt = (len&lt;rng_cnt)?len:rng_cnt;
        rng_cnt -= gen_cnt;

        len = gen_cnt;

        <span class="kwa">while</span>( <span class="num">0</span> != len-- )
        {
            seed=(seed*IA + IC)%IM;
            *(buf++) = seed;<span class="slc">//This is stupid actually!</span>
        }
    }

    <span class="kwd">RNG_FREE</span>();
    <span class="kwa">return</span> gen_cnt;
}

<span class="kwb">int</span> out_tid; <span class="slc">//Thread ID</span>
<span class="kwb">int</span> out_tnum = <span class="num">1</span>; <span class="slc">//Thread number</span>
<span class="ppc">#ifdef _OPENMP</span>
omp_lock_t out_lock;
<span class="ppc">#define OUT_LOCK_INIT() omp_init_lock(&amp;out_lock)</span>
<span class="ppc">#define OUT_LOCK() omp_set_lock(&amp;out_lock)</span>
<span class="ppc">#define OUT_FREE() omp_unset_lock(&amp;out_lock)</span>
<span class="ppc">#else</span>
<span class="ppc">#define OUT_LOCK_INIT() do{}while(0)</span>
<span class="ppc">#define OUT_LOCK() do{}while(0)</span>
<span class="ppc">#define OUT_FREE() do{}while(0)</span>
<span class="ppc">#endif</span>

<span class="kwb">static void</span> <span class="kwd">out_init</span>(<span class="kwb">void</span>)
{
    <span class="kwd">OUT_LOCK_INIT</span>();
    rng_tid = <span class="num">0</span>;
}

<span class="kwb">static</span> intnative_t <span class="kwd">out_write</span>(<span class="kwb">char</span> * buf, intnative_t len, <span class="kwb">int</span> curr_tid)
{
    intnative_t wr_cnt = -<span class="num">1</span>;<span class="slc">//Error by default</span>
    <span class="kwd">OUT_LOCK</span>();

    <span class="kwa">if</span>( out_tid == curr_tid )
    {
        <span class="kwa">if</span>( ++out_tid &gt;= out_tnum )
        {
            out_tid = <span class="num">0</span>;
        }
        wr_cnt = <span class="kwd">fwrite</span>(buf, len, <span class="num">1</span>, stdout);
    }

    <span class="kwd">OUT_FREE</span>();
    <span class="kwa">return</span> wr_cnt; <span class="slc">//-1 - thread error, 0 - IO error, 1 - ОК</span>
}

<span class="kwb">static void</span> <span class="kwd">generate_And_Wrap_Pseudorandom_DNA_Sequence</span>(
    <span class="kwb">const</span> nucleotide_info nucl_info[],
    <span class="kwb">const</span> intnative_t nucl_num,
    <span class="kwb">const</span> intnative_t char_num)
{
    <span class="kwb">uint32_t</span> cumul_p[nucl_num];
    <span class="kwb">float</span> cumul_acc=<span class="num">0.0</span>;

    <span class="kwa">for</span>(intnative_t i=<span class="num">0</span>; i&lt;nucl_num; i++)
    {
        cumul_acc+=nucl_info[i].probability;
        cumul_p[i]= <span class="num">1ul</span>+ (<span class="kwb">uint32_t</span>)(cumul_acc*(<span class="kwb">float</span>)IM); <span class="slc">//Compensate rounding errors on test file</span>
    }

<span class="ppc">#ifdef _OPENMP</span>
    intnative_t tnum=<span class="kwd">omp_get_num_procs</span>();
    <span class="kwa">if</span>(tnum&gt;THREADS_TO_USE) tnum=THREADS_TO_USE;
    <span class="kwd">omp_set_num_threads</span>(tnum);
    rng_tnum = tnum;
    out_tnum = tnum;
<span class="ppc">#endif</span>
    rng_tid = <span class="num">0</span>;
    out_tid = <span class="num">0</span>;
    rng_cnt = char_num;

<span class="ppc">#pragma omp parallel</span>
    {
        <span class="kwb">char</span> block[CHARACTERS_PER_BLOCK+LINES_PER_BLOCK];
        <span class="kwb">char</span> * line;
        <span class="kwb">uint32_t</span> rnd[CHARACTERS_PER_BLOCK], r;
        intnative_t cnt, col, prid, nid, ncnt;
        <span class="kwb">int</span> cur_tid;
<span class="ppc">#ifdef _OPENMP</span>
        cur_tid = <span class="kwd">omp_get_thread_num</span>();
<span class="ppc">#else</span>
        cur_tid = <span class="num">0</span>;
<span class="ppc">#endif</span>
        <span class="kwa">while</span>(<span class="num">1</span>)
        {
            <span class="kwa">do</span>
            {
                cnt = <span class="kwd">rng_gen_blk</span>(rnd, CHARACTERS_PER_BLOCK, cur_tid);
            }
            <span class="kwa">while</span>( -<span class="num">1</span> == cnt );

            <span class="kwa">if</span>( <span class="num">0</span> == cnt )
            {
                <span class="kwa">break</span>;<span class="slc">//Work finished!</span>
            }

            line = block;

            <span class="kwa">for</span>( col = <span class="num">0</span>, prid = <span class="num">0</span>; prid &lt; cnt; prid++ )
            {
                r = rnd[prid];

                ncnt = <span class="num">0</span>;
                <span class="kwa">for</span>( nid = <span class="num">0</span>; nid &lt; nucl_num; nid++ )
                {
                    <span class="kwa">if</span>(cumul_p[nid]&lt;=r)
                    {
                        ncnt++;
                    }
                }

                *line++ = nucl_info[ncnt].letter;
                <span class="kwa">if</span>( ++col &gt;= MAXIMUM_LINE_WIDTH )
                {
                    col = <span class="num">0</span>;
                    *line++ = <span class="str">&apos;</span><span class="esc">\n</span><span class="str">&apos;</span>;
                }
            }
            <span class="slc">//Check if we need to end the line</span>
            <span class="kwa">if</span>( <span class="num">0</span> != col )
            {
                <span class="slc">//Last iteration didn&apos;t end the line, so finish the job.</span>
                *line++ = <span class="str">&apos;</span><span class="esc">\n</span><span class="str">&apos;</span>;
            }
            <span class="slc">//Print results</span>
            <span class="kwa">do</span>
            {
                cnt = <span class="kwd">out_write</span>(block, line - block, cur_tid);
            }
            <span class="kwa">while</span>( -<span class="num">1</span> == cnt );
            <span class="slc">//Check  fot IO error</span>
            <span class="kwa">if</span>( <span class="num">0</span>  == cnt )
            {
                <span class="kwd">exit</span>(<span class="num">1</span>);
            }
        }
    }
}


<span class="kwb">int</span> <span class="kwd">main</span>(<span class="kwb">int</span> argc, <span class="kwb">char</span> ** argv)
{
    <span class="kwb">const</span> intnative_t n=<span class="kwd">atoi</span>(argv[<span class="num">1</span>]);

    <span class="kwd">fputs</span>(<span class="str">&quot;&gt;ONE Homo sapiens alu</span><span class="esc">\n</span><span class="str">&quot;</span>, stdout);
    <span class="kwb">const char</span> homo_Sapiens_Alu[]=
        <span class="str">&quot;GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGGGAGGCCGAGGCGGGCGGATCACCTGAGGTC&quot;</span>
        <span class="str">&quot;AGGAGTTCGAGACCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAATACAAAAATTAGCCGGGCG&quot;</span>
        <span class="str">&quot;TGGTGGCGCGCGCCTGTAATCCCAGCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGGAGGCGG&quot;</span>
        <span class="str">&quot;AGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCCAGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA&quot;</span>;
    <span class="kwd">repeat_And_Wrap_String</span>(homo_Sapiens_Alu, <span class="num">2</span>*n);

    <span class="kwd">rng_init</span>();
    <span class="kwd">out_init</span>();

    <span class="kwd">fputs</span>(<span class="str">&quot;&gt;TWO IUB ambiguity codes</span><span class="esc">\n</span><span class="str">&quot;</span>, stdout);
    nucleotide_info iub_Nucleotides_Information[]=
    {
        {<span class="str">&apos;a&apos;</span>, <span class="num">0.27</span>}, {<span class="str">&apos;c&apos;</span>, <span class="num">0.12</span>}, {<span class="str">&apos;g&apos;</span>, <span class="num">0.12</span>}, {<span class="str">&apos;t&apos;</span>, <span class="num">0.27</span>}, {<span class="str">&apos;B&apos;</span>, <span class="num">0.02</span>},
        {<span class="str">&apos;D&apos;</span>, <span class="num">0.02</span>}, {<span class="str">&apos;H&apos;</span>, <span class="num">0.02</span>}, {<span class="str">&apos;K&apos;</span>, <span class="num">0.02</span>}, {<span class="str">&apos;M&apos;</span>, <span class="num">0.02</span>}, {<span class="str">&apos;N&apos;</span>, <span class="num">0.02</span>},
        {<span class="str">&apos;R&apos;</span>, <span class="num">0.02</span>}, {<span class="str">&apos;S&apos;</span>, <span class="num">0.02</span>}, {<span class="str">&apos;V&apos;</span>, <span class="num">0.02</span>}, {<span class="str">&apos;W&apos;</span>, <span class="num">0.02</span>}, {<span class="str">&apos;Y&apos;</span>, <span class="num">0.02</span>}
    };
    <span class="kwd">generate_And_Wrap_Pseudorandom_DNA_Sequence</span>(iub_Nucleotides_Information,
                                                <span class="kwa">sizeof</span>(iub_Nucleotides_Information)/<span class="kwa">sizeof</span>(nucleotide_info), <span class="num">3</span>*n);

    <span class="kwd">fputs</span>(<span class="str">&quot;&gt;THREE Homo sapiens frequency</span><span class="esc">\n</span><span class="str">&quot;</span>, stdout);
    nucleotide_info homo_Sapien_Nucleotides_Information[]=
    {
        {<span class="str">&apos;a&apos;</span>, <span class="num">0.3029549426680</span>}, {<span class="str">&apos;c&apos;</span>, <span class="num">0.1979883004921</span>},
        {<span class="str">&apos;g&apos;</span>, <span class="num">0.1975473066391</span>}, {<span class="str">&apos;t&apos;</span>, <span class="num">0.3015094502008</span>}
    };
    <span class="kwd">generate_And_Wrap_Pseudorandom_DNA_Sequence</span>(homo_Sapien_Nucleotides_Information,
                                                <span class="kwa">sizeof</span>(homo_Sapien_Nucleotides_Information)/<span class="kwa">sizeof</span>(nucleotide_info), <span class="num">5</span>*n);

    <span class="kwa">return</span> <span class="num">0</span>;
}
