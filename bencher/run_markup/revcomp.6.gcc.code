<span class="slc">// The Computer Language Benchmarks Game</span>
<span class="slc">// https://salsa.debian.org/benchmarksgame-team/benchmarksgame/</span>
<span class="slc">//</span>
<span class="slc">// Contributed by Jeremy Zerfas</span>

<span class="slc">// This string/character array is used to convert characters into the</span>
<span class="slc">// complementing character.</span>
<span class="ppc">#define COMPLEMENT_LOOKUP \</span>
<span class="ppc"></span>  <span class="pps">&quot;                                                                &quot;</span><span class="ppc">\</span>
<span class="ppc"></span>  <span class="com">/*ABCDEFGHIJKLMNOPQRSTUVWXYZ      abcdefghijklmnopqrstuvwxyz    */</span><span class="ppc">\</span>
<span class="ppc"></span>  <span class="pps">&quot; TVGH  CD  M KN   YSAABW R       TVGH  CD  M KN   YSAABW R&quot;</span><span class="ppc"></span>

<span class="slc">// This controls the size of reads from the input and is also used as the</span>
<span class="slc">// initial sequence_Capacity.</span>
<span class="ppc">#define READ_SIZE 16384</span>

<span class="ppc">#include &lt;stdio.h&gt;</span>
<span class="ppc">#include &lt;stdlib.h&gt;</span>
<span class="ppc">#include &lt;string.h&gt;</span>
<span class="ppc">#include &lt;stdint.h&gt;</span>

<span class="slc">// intptr_t should be the native integer type on most sane systems.</span>
<span class="kwc">typedef</span> <span class="kwb">intptr_t</span> intnative_t;


<span class="kwb">static</span> intnative_t next_Sequence_Number_To_Output=<span class="num">1</span>;

<span class="kwb">static void</span> <span class="kwd">process_Sequence</span>(<span class="kwb">char</span> * sequence, <span class="kwb">const</span> intnative_t sequence_Size
  , <span class="kwb">const</span> intnative_t sequence_Number){
   <span class="slc">// Free up any memory we didn&apos;t need.</span>
   sequence=<span class="kwd">realloc</span>(sequence, sequence_Size);

   <span class="slc">// Set up pointers to the front_Pos and bac_Pos, advance front_Pos to the</span>
   <span class="slc">// first character on the next line, and then make sure front_Pos and</span>
   <span class="slc">// back_Pos start out pointing to non-line feed characters (unless all the</span>
   <span class="slc">// characters happen to be line feeds in which case front_Pos will go past</span>
   <span class="slc">// back_Pos causing the reversing and complementing loop to do nothing.</span>
   <span class="kwb">char</span> * front_Pos=sequence, * back_Pos=sequence+sequence_Size-<span class="num">1</span>;
   <span class="kwa">while</span>(*front_Pos++!=<span class="str">&apos;</span><span class="esc">\n</span><span class="str">&apos;</span>);
   <span class="kwa">while</span>(*front_Pos==<span class="str">&apos;</span><span class="esc">\n</span><span class="str">&apos;</span> &amp;&amp; front_Pos&lt;=back_Pos) front_Pos++;
   <span class="kwa">while</span>(*back_Pos==<span class="str">&apos;</span><span class="esc">\n</span><span class="str">&apos;</span> &amp;&amp; front_Pos&lt;=back_Pos) back_Pos--;

   <span class="slc">// Reverse and complement the sequence.</span>
   <span class="kwa">while</span>(front_Pos&lt;=back_Pos){
      <span class="kwb">const char</span> temp=COMPLEMENT_LOOKUP[(<span class="kwb">unsigned char</span>)*front_Pos];
      *front_Pos=COMPLEMENT_LOOKUP[(<span class="kwb">unsigned char</span>)*back_Pos];
      *back_Pos=temp;

      <span class="slc">// Skip over line feeds.</span>
      <span class="kwa">while</span>(*++front_Pos==<span class="str">&apos;</span><span class="esc">\n</span><span class="str">&apos;</span>);
      <span class="kwa">while</span>(*--back_Pos==<span class="str">&apos;</span><span class="esc">\n</span><span class="str">&apos;</span>);
   }

   <span class="slc">// Wait for our turn to output the altered sequence and then output it.</span>
   <span class="ppc">#pragma omp flush(next_Sequence_Number_To_Output)</span>
   <span class="kwa">while</span>(sequence_Number!=next_Sequence_Number_To_Output){
      <span class="ppc">#pragma omp flush(next_Sequence_Number_To_Output)</span>
   }
   <span class="kwd">fwrite</span>(sequence, <span class="num">1</span>, sequence_Size, stdout);
   next_Sequence_Number_To_Output++;
   <span class="ppc">#pragma omp flush(next_Sequence_Number_To_Output)</span>

   <span class="slc">// Free the memory for the altered sequence.</span>
   <span class="kwd">free</span>(sequence);
}


<span class="kwb">int</span> <span class="kwd">main</span>(){
   <span class="ppc">#pragma omp parallel</span>
   {
      <span class="ppc">#pragma omp single</span>
      {
         <span class="slc">// Allocate memory for the initial sequence (assuming there is one).</span>
         intnative_t sequence_Capacity=READ_SIZE, sequence_Size=<span class="num">0</span>
           , sequence_Number=<span class="num">1</span>;
         <span class="kwb">char</span> * sequence=<span class="kwd">malloc</span>(sequence_Capacity);

         <span class="slc">// Read in sequence data until we reach the end of the file or</span>
         <span class="slc">// encounter an error.</span>
         <span class="kwa">for</span>(intnative_t bytes_Read; (bytes_Read
           =<span class="kwd">fread</span>(&amp;sequence[sequence_Size], <span class="num">1</span>, READ_SIZE, stdin)); ){


            <span class="slc">// Search the read in chunk of data for a &apos;&gt;&apos; to see if any</span>
            <span class="slc">// sequences are being started.</span>
            <span class="kwa">for</span>(<span class="kwb">char</span> * sequence_Start; (sequence_Start
              =<span class="kwd">memchr</span>(&amp;sequence[sequence_Size], <span class="str">&apos;&gt;&apos;</span>, bytes_Read)); ){

               <span class="slc">// Update the sequence_Size to reflect any data before the</span>
               <span class="slc">// &apos;&gt;&apos; that was read in.</span>
               <span class="kwb">const</span> intnative_t number_Of_Preceding_Bytes
                 =sequence_Start-&amp;sequence[sequence_Size];
               sequence_Size+=number_Of_Preceding_Bytes;


               <span class="slc">// If there is any data for the current sequence, then</span>
               <span class="slc">// start processing it.</span>
               <span class="kwa">if</span>(sequence_Size){

                  <span class="slc">// Allocate memory for a new sequence and copy the &apos;&gt;&apos;</span>
                  <span class="slc">// &amp; any data following it to the new sequence.</span>
                  <span class="kwb">char</span> * <span class="kwb">const</span> new_Sequence=<span class="kwd">malloc</span>(READ_SIZE);
                  <span class="kwd">memcpy</span>(new_Sequence, sequence_Start
                    , bytes_Read-number_Of_Preceding_Bytes);

                  <span class="slc">// Process the current sequence and have another thread</span>
                  <span class="slc">// do the work if OpenMP is enabled and there is more</span>
                  <span class="slc">// than one CPU core.</span>
                  <span class="ppc">#pragma omp task\</span>
<span class="ppc">                    firstprivate(sequence, sequence_Size, sequence_Number)</span>
                  {
                     <span class="kwd">process_Sequence</span>(sequence, sequence_Size
                       , sequence_Number);
                  }

                  <span class="slc">// Update variables to reflect the new sequence.</span>
                  sequence=new_Sequence;
                  sequence_Capacity=READ_SIZE;
                  sequence_Size=<span class="num">0</span>;
                  sequence_Number++;
               }


               <span class="slc">// Update sequence_Size and bytes_Read to reflect the read</span>
               <span class="slc">// in &apos;&gt;&apos; and any data that preceded it.</span>
               sequence_Size++;
               bytes_Read-=number_Of_Preceding_Bytes+<span class="num">1</span>;
            }


            <span class="slc">// Update sequence_Size to reflect the bytes that were read in.</span>
            sequence_Size+=bytes_Read;

            <span class="slc">// If there potentially isn&apos;t enough free space for all the data</span>
            <span class="slc">// from the next read, then double the capacity of the sequence.</span>
            <span class="kwa">if</span>(sequence_Size&gt;sequence_Capacity-READ_SIZE)
               sequence=<span class="kwd">realloc</span>(sequence, sequence_Capacity*=<span class="num">2</span>);
         }


         <span class="slc">// If there is any data for a last sequence, process it, otherwise</span>
         <span class="slc">// just free the sequence memory.</span>
         <span class="kwa">if</span>(sequence_Size)
            <span class="kwd">process_Sequence</span>(sequence, sequence_Size, sequence_Number);
         <span class="kwa">else</span>
            <span class="kwd">free</span>(sequence);
      }
   }

   <span class="kwa">return</span> <span class="num">0</span>;
}
