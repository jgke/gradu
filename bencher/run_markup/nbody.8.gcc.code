<span class="slc">// The Computer Language Benchmarks Game</span>
<span class="slc">// https://salsa.debian.org/benchmarksgame-team/benchmarksgame/</span>
<span class="slc">//</span>
<span class="slc">// Contributed by Mark C. Lewis.</span>
<span class="slc">// Modified slightly by Chad Whipkey.</span>
<span class="slc">// Converted from Java to C++ and added SSE support by Branimir Maksimovic.</span>
<span class="slc">// Converted from C++ to C by Alexey Medvedchikov.</span>
<span class="slc">// Modified by Jeremy Zerfas.</span>

<span class="ppc">#include &lt;stdint.h&gt;</span>
<span class="ppc">#include &lt;stdalign.h&gt;</span>
<span class="ppc">#include &lt;immintrin.h&gt;</span>
<span class="ppc">#include &lt;math.h&gt;</span>
<span class="ppc">#include &lt;stdio.h&gt;</span>

<span class="slc">// intptr_t should be the native integer type on most sane systems.</span>
<span class="kwc">typedef</span> <span class="kwb">intptr_t</span> intnative_t;

<span class="kwc">typedef</span> <span class="kwb">struct</span>{
    <span class="kwb">double</span> position[<span class="num">3</span>], velocity[<span class="num">3</span>], mass;
} body;

<span class="ppc">#define SOLAR_MASS (4*M_PI*M_PI)</span>
<span class="ppc">#define DAYS_PER_YEAR 365.24</span>
<span class="ppc">#define BODIES_COUNT 5</span>

<span class="kwb">static</span> body solar_Bodies[]={
    {    <span class="slc">// Sun</span>
        .mass=SOLAR_MASS
    },
    {    <span class="slc">// Jupiter</span>
        {
             <span class="num">4.84143144246472090e+00</span>,
            -<span class="num">1.16032004402742839e+00</span>,
            -<span class="num">1.03622044471123109e-01</span>
        },
        {
             <span class="num">1.66007664274403694e-03</span> * DAYS_PER_YEAR,
             <span class="num">7.69901118419740425e-03</span> * DAYS_PER_YEAR,
            -<span class="num">6.90460016972063023e-05</span> * DAYS_PER_YEAR
        },
        <span class="num">9.54791938424326609e-04</span> * SOLAR_MASS
    },
    {    <span class="slc">// Saturn</span>
        {
             <span class="num">8.34336671824457987e+00</span>,
             <span class="num">4.12479856412430479e+00</span>,
            -<span class="num">4.03523417114321381e-01</span>
        },
        {
            -<span class="num">2.76742510726862411e-03</span> * DAYS_PER_YEAR,
             <span class="num">4.99852801234917238e-03</span> * DAYS_PER_YEAR,
             <span class="num">2.30417297573763929e-05</span> * DAYS_PER_YEAR
        },
        <span class="num">2.85885980666130812e-04</span> * SOLAR_MASS
    },
    {    <span class="slc">// Uranus</span>
        {
             <span class="num">1.28943695621391310e+01</span>,
            -<span class="num">1.51111514016986312e+01</span>,
            -<span class="num">2.23307578892655734e-01</span>
        },
        {
             <span class="num">2.96460137564761618e-03</span> * DAYS_PER_YEAR,
             <span class="num">2.37847173959480950e-03</span> * DAYS_PER_YEAR,
            -<span class="num">2.96589568540237556e-05</span> * DAYS_PER_YEAR
        },
        <span class="num">4.36624404335156298e-05</span> * SOLAR_MASS
    },
    {    <span class="slc">// Neptune</span>
        {
             <span class="num">1.53796971148509165e+01</span>,
            -<span class="num">2.59193146099879641e+01</span>,
             <span class="num">1.79258772950371181e-01</span>
        },
        {
             <span class="num">2.68067772490389322e-03</span> * DAYS_PER_YEAR,
             <span class="num">1.62824170038242295e-03</span> * DAYS_PER_YEAR,
            -<span class="num">9.51592254519715870e-05</span> * DAYS_PER_YEAR
        },
        <span class="num">5.15138902046611451e-05</span> * SOLAR_MASS
    }
};


<span class="slc">// Advance all the bodies in the system by one timestep. Calculate the</span>
<span class="slc">// interactions between all the bodies, update each body&apos;s velocity based on</span>
<span class="slc">// those interactions, and update each body&apos;s position by the distance it</span>
<span class="slc">// travels in a timestep at it&apos;s updated velocity.</span>
<span class="kwb">static void</span> <span class="kwd">advance</span>(body bodies[]){

    <span class="slc">// Figure out how many total different interactions there are between each</span>
    <span class="slc">// body and every other body. Some of the calculations for these</span>
    <span class="slc">// interactions will be calculated two at a time by using x86 SSE</span>
    <span class="slc">// instructions and because of that it will also be useful to have a</span>
    <span class="slc">// ROUNDED_INTERACTIONS_COUNT that is equal to the next highest even number</span>
    <span class="slc">// which is equal to or greater than INTERACTIONS_COUNT.</span>
    <span class="ppc">#define INTERACTIONS_COUNT (BODIES_COUNT*(BODIES_COUNT-1)/2)</span>
    <span class="ppc">#define ROUNDED_INTERACTIONS_COUNT (INTERACTIONS_COUNT+INTERACTIONS_COUNT%2)</span>

    <span class="slc">// It&apos;s useful to have two arrays to keep track of the position_Deltas</span>
    <span class="slc">// and magnitudes of force between the bodies for each interaction. For the</span>
    <span class="slc">// position_Deltas array, instead of using a one dimensional array of</span>
    <span class="slc">// structures that each contain the X, Y, and Z components for a position</span>
    <span class="slc">// delta, a two dimensional array is used instead which consists of three</span>
    <span class="slc">// arrays that each contain all of the X, Y, and Z components for all of the</span>
    <span class="slc">// position_Deltas. This allows for more efficient loading of this data into</span>
    <span class="slc">// SSE registers. Both of these arrays are also set to contain</span>
    <span class="slc">// ROUNDED_INTERACTIONS_COUNT elements to simplify one of the following</span>
    <span class="slc">// loops and to also keep the second and third arrays in position_Deltas</span>
    <span class="slc">// aligned properly.</span>
    <span class="kwb">static</span> <span class="kwd">alignas</span>(__m128d) <span class="kwb">double</span>
      position_Deltas[<span class="num">3</span>][ROUNDED_INTERACTIONS_COUNT],
      magnitudes[ROUNDED_INTERACTIONS_COUNT];

    <span class="slc">// Calculate the position_Deltas between the bodies for each interaction.</span>
    <span class="kwa">for</span>(intnative_t i=<span class="num">0</span>, k=<span class="num">0</span>; i&lt;BODIES_COUNT-<span class="num">1</span>; ++i)
        <span class="kwa">for</span>(intnative_t j=i+<span class="num">1</span>; j&lt;BODIES_COUNT; ++j, ++k)
            <span class="kwa">for</span>(intnative_t m=<span class="num">0</span>; m&lt;<span class="num">3</span>; ++m)
                position_Deltas[m][k]=
                  bodies[i].position[m]-bodies[j].position[m];

    <span class="slc">// Calculate the magnitudes of force between the bodies for each</span>
    <span class="slc">// interaction. This loop processes two interactions at a time which is why</span>
    <span class="slc">// ROUNDED_INTERACTIONS_COUNT/2 iterations are done.</span>
    <span class="kwa">for</span>(intnative_t i=<span class="num">0</span>; i&lt;ROUNDED_INTERACTIONS_COUNT/<span class="num">2</span>; ++i){

        <span class="slc">// Load position_Deltas of two bodies into position_Delta.</span>
        __m128d position_Delta[<span class="num">3</span>];
        <span class="kwa">for</span>(intnative_t m=<span class="num">0</span>; m&lt;<span class="num">3</span>; ++m)
            position_Delta[m]=((__m128d *)position_Deltas[m])[i];

        <span class="kwb">const</span> __m128d distance_Squared=
          position_Delta[<span class="num">0</span>]*position_Delta[<span class="num">0</span>]+
          position_Delta[<span class="num">1</span>]*position_Delta[<span class="num">1</span>]+
          position_Delta[<span class="num">2</span>]*position_Delta[<span class="num">2</span>];

        <span class="slc">// Doing square roots normally using double precision floating point</span>
        <span class="slc">// math can be quite time consuming so SSE&apos;s much faster single</span>
        <span class="slc">// precision reciprocal square root approximation instruction is used as</span>
        <span class="slc">// a starting point instead. The precision isn&apos;t quite sufficient to get</span>
        <span class="slc">// acceptable results so two iterations of the Newtonâ€“Raphson method are</span>
        <span class="slc">// done to improve precision further.</span>
        __m128d distance_Reciprocal=
          <span class="kwd">_mm_cvtps_pd</span>(<span class="kwd">_mm_rsqrt_ps</span>(<span class="kwd">_mm_cvtpd_ps</span>(distance_Squared)));
        <span class="kwa">for</span>(intnative_t j=<span class="num">0</span>; j&lt;<span class="num">2</span>; ++j)
            <span class="slc">// Normally the last four multiplications in this equation would</span>
            <span class="slc">// have to be done sequentially but by placing the last</span>
            <span class="slc">// multiplication in parentheses, a compiler can then schedule that</span>
            <span class="slc">// multiplication earlier.</span>
            distance_Reciprocal=distance_Reciprocal*<span class="num">1.5</span>-
              <span class="num">0.5</span>*distance_Squared*distance_Reciprocal*
              (distance_Reciprocal*distance_Reciprocal);

        <span class="slc">// Calculate the magnitudes of force between the bodies. Typically this</span>
        <span class="slc">// calculation would probably be done by using a division by the cube of</span>
        <span class="slc">// the distance (or similarly a multiplication by the cube of its</span>
        <span class="slc">// reciprocal) but for better performance on modern computers it often</span>
        <span class="slc">// will make sense to do part of the calculation using a division by the</span>
        <span class="slc">// distance_Squared which was already calculated earlier. Additionally</span>
        <span class="slc">// this method is probably a little more accurate due to less rounding</span>
        <span class="slc">// as well.</span>
        ((__m128d *)magnitudes)[i]=<span class="num">0.01</span>/distance_Squared*distance_Reciprocal;
    }

    <span class="slc">// Use the calculated magnitudes of force to update the velocities for all</span>
    <span class="slc">// of the bodies.</span>
    <span class="kwa">for</span>(intnative_t i=<span class="num">0</span>, k=<span class="num">0</span>; i&lt;BODIES_COUNT-<span class="num">1</span>; ++i)
        <span class="kwa">for</span>(intnative_t j=i+<span class="num">1</span>; j&lt;BODIES_COUNT; ++j, ++k){
            <span class="slc">// Precompute the products of the mass and magnitude since it can be</span>
            <span class="slc">// reused a couple times.</span>
            <span class="kwb">const double</span>
              i_mass_magnitude=bodies[i].mass*magnitudes[k],
              j_mass_magnitude=bodies[j].mass*magnitudes[k];
            <span class="kwa">for</span>(intnative_t m=<span class="num">0</span>; m&lt;<span class="num">3</span>; ++m){
                bodies[i].velocity[m]-=position_Deltas[m][k]*j_mass_magnitude;
                bodies[j].velocity[m]+=position_Deltas[m][k]*i_mass_magnitude;
            }
        }

    <span class="slc">// Use the updated velocities to update the positions for all of the bodies.</span>
    <span class="kwa">for</span>(intnative_t i=<span class="num">0</span>; i&lt;BODIES_COUNT; ++i)
        <span class="kwa">for</span>(intnative_t m=<span class="num">0</span>; m&lt;<span class="num">3</span>; ++m)
            bodies[i].position[m]+=<span class="num">0.01</span>*bodies[i].velocity[m];
}


<span class="slc">// Calculate the momentum of each body and conserve momentum of the system by</span>
<span class="slc">// adding to the Sun&apos;s velocity the appropriate opposite velocity needed in</span>
<span class="slc">// order to offset that body&apos;s momentum.</span>
<span class="kwb">static void</span> <span class="kwd">offset_Momentum</span>(body bodies[]){
    <span class="kwa">for</span>(intnative_t i=<span class="num">0</span>; i&lt;BODIES_COUNT; ++i)
        <span class="kwa">for</span>(intnative_t m=<span class="num">0</span>; m&lt;<span class="num">3</span>; ++m)
            bodies[<span class="num">0</span>].velocity[m]-=
              bodies[i].velocity[m]*bodies[i].mass/SOLAR_MASS;
}


<span class="slc">// Output the total energy of the system.</span>
<span class="kwb">static void</span> <span class="kwd">output_Energy</span>(body bodies[]){
    <span class="kwb">double</span> energy=<span class="num">0</span>;
    <span class="kwa">for</span>(intnative_t i=<span class="num">0</span>; i&lt;BODIES_COUNT; ++i){

        <span class="slc">// Add the kinetic energy for each body.</span>
        energy+=<span class="num">0.5</span>*bodies[i].mass*(
          bodies[i].velocity[<span class="num">0</span>]*bodies[i].velocity[<span class="num">0</span>]+
          bodies[i].velocity[<span class="num">1</span>]*bodies[i].velocity[<span class="num">1</span>]+
          bodies[i].velocity[<span class="num">2</span>]*bodies[i].velocity[<span class="num">2</span>]);

        <span class="slc">// Add the potential energy between this body and every other body.</span>
        <span class="kwa">for</span>(intnative_t j=i+<span class="num">1</span>; j&lt;BODIES_COUNT; ++j){
            <span class="kwb">double</span> position_Delta[<span class="num">3</span>];
            <span class="kwa">for</span>(intnative_t m=<span class="num">0</span>; m&lt;<span class="num">3</span>; ++m)
                position_Delta[m]=bodies[i].position[m]-bodies[j].position[m];

            energy-=bodies[i].mass*bodies[j].mass/<span class="kwd">sqrt</span>(
              position_Delta[<span class="num">0</span>]*position_Delta[<span class="num">0</span>]+
              position_Delta[<span class="num">1</span>]*position_Delta[<span class="num">1</span>]+
              position_Delta[<span class="num">2</span>]*position_Delta[<span class="num">2</span>]);
        }
    }

    <span class="slc">// Output the total energy of the system.</span>
    <span class="kwd">printf</span>(<span class="str">&quot;%.9f</span><span class="esc">\n</span><span class="str">&quot;</span>, energy);
}


<span class="kwb">int</span> <span class="kwd">main</span>(<span class="kwb">int</span> argc, <span class="kwb">char</span> *argv[]){
    <span class="kwd">offset_Momentum</span>(solar_Bodies);
    <span class="kwd">output_Energy</span>(solar_Bodies);
    <span class="kwa">for</span>(intnative_t n=<span class="kwd">atoi</span>(argv[<span class="num">1</span>]); n--; <span class="kwd">advance</span>(solar_Bodies));
    <span class="kwd">output_Energy</span>(solar_Bodies);
}
