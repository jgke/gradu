<span class="slc">// The Computer Language Benchmarks Game</span>
<span class="slc">// https://salsa.debian.org/benchmarksgame-team/benchmarksgame/</span>
<span class="slc">//</span>
<span class="slc">// contributed by Shakhno DV, Shakhno AV</span>

<span class="ppc">#include &lt;math.h&gt;</span>
<span class="ppc">#include &lt;stdio.h&gt;</span>
<span class="ppc">#include &lt;stdlib.h&gt;</span>


<span class="ppc">#define pi 3.141592653589793</span>
<span class="ppc">#define solar_mass (4 * pi * pi)</span>
<span class="ppc">#define days_per_year 365.24</span>
<span class="ppc">#define NBODIES 5</span>
<span class="ppc">#define DT 0.01</span>

<span class="kwb">double</span> x[NBODIES], y[NBODIES], z[NBODIES];
<span class="kwb">double</span> vx[NBODIES], vy[NBODIES], vz[NBODIES];
<span class="kwb">double</span> mass[NBODIES];


<span class="kwb">void</span> <span class="kwd">advance</span>(<span class="kwb">int</span> n)
{
    <span class="kwb">double</span> dx;
    <span class="kwb">double</span> x1;
    <span class="kwb">double</span> y1;
    <span class="kwb">double</span> z1;
    <span class="kwb">double</span> dy;
    <span class="kwb">double</span> dz;
    <span class="kwb">double</span> R;
    <span class="kwb">double</span> mag;
    <span class="kwa">for</span> (<span class="kwb">int</span> k = <span class="num">1</span>; k &lt;= n; ++k)
    {
        <span class="kwa">for</span> (<span class="kwb">int</span> i = <span class="num">0</span>; i &lt; NBODIES; ++i)
        {
            x1 = x[i];
            y1 = y[i];
            z1 = z[i];
            <span class="kwa">for</span> (<span class="kwb">int</span> j = i + <span class="num">1</span>; j &lt; NBODIES; ++j)
            {
                dx = x1 - x[j];
                R = dx * dx;
                dy = y1 - y[j];
                R += dy * dy;
                dz = z1 - z[j];
                R += dz * dz;
                R = <span class="kwd">sqrt</span>(R);
                mag = DT / (R * R * R);
                vx[i] -= dx * mass[j] * mag;
                vy[i] -= dy * mass[j] * mag;
                vz[i] -= dz * mass[j] * mag;
                vx[j] += dx * mass[i] * mag;
                vy[j] += dy * mass[i] * mag;
                vz[j] += dz * mass[i] * mag;
            }
        }

        <span class="kwa">for</span> (<span class="kwb">int</span> i = <span class="num">0</span>; i &lt; NBODIES; ++i)
        {
            x[i] += DT * vx[i];
            y[i] += DT * vy[i];
            z[i] += DT * vz[i];
        }
    }
}

<span class="kwb">double</span> <span class="kwd">energy</span>()
{
    <span class="kwb">double</span> e = <span class="num">0.0</span>;
    <span class="kwa">for</span> (<span class="kwb">int</span> i = <span class="num">0</span>; i &lt; NBODIES; ++i)
    {
        e += <span class="num">0.5</span> *mass[i] * (vx[i] * vx[i] + vy[i] * vy[i] + vz[i] * vz[i]);
        <span class="kwa">for</span> (<span class="kwb">int</span> j = i + <span class="num">1</span>; j &lt; NBODIES; ++j)
        {
            <span class="kwb">double</span> dx = x[i] - x[j];
            <span class="kwb">double</span> dy = y[i] - y[j];
            <span class="kwb">double</span> dz = z[i] - z[j];
            <span class="kwb">double</span> distance = <span class="kwd">sqrt</span>(dx * dx + dy * dy + dz * dz);
            e -= (mass[i] * mass[j]) / distance;
        }
    }
    <span class="kwa">return</span> e;
}

<span class="kwb">void</span> <span class="kwd">offset_momentum</span>()
{
    <span class="kwb">double</span> px = <span class="num">0.0</span>, py = <span class="num">0.0</span>, pz = <span class="num">0.0</span>;
    <span class="kwa">for</span> (<span class="kwb">int</span> i = <span class="num">0</span>; i &lt; NBODIES; ++i)
    {
        px += vx[i] * mass[i];
        py += vy[i] * mass[i];
        pz += vz[i] * mass[i];
    }
    vx[<span class="num">0</span>] = -px / solar_mass;
    vy[<span class="num">0</span>] = -py / solar_mass;
    vz[<span class="num">0</span>] = -pz / solar_mass;
}

<span class="kwb">void</span> <span class="kwd">init</span>()
{
    x[<span class="num">0</span>] = <span class="num">0</span>;
    y[<span class="num">0</span>] = <span class="num">0</span>;
    z[<span class="num">0</span>] = <span class="num">0</span>;
    vx[<span class="num">0</span>] = <span class="num">0</span>;
    vy[<span class="num">0</span>] = <span class="num">0</span>;
    vz[<span class="num">0</span>] = <span class="num">0</span>;
    mass[<span class="num">0</span>] = solar_mass;
    x[<span class="num">1</span>] = <span class="num">4.84143144246472090e+00</span>;
    y[<span class="num">1</span>] = -<span class="num">1.16032004402742839e+00</span>;
    z[<span class="num">1</span>] = -<span class="num">1.03622044471123109e-01</span>;
    vx[<span class="num">1</span>] = <span class="num">1.66007664274403694e-03</span> * days_per_year;
    vy[<span class="num">1</span>] = <span class="num">7.69901118419740425e-03</span> * days_per_year;
    vz[<span class="num">1</span>] = -<span class="num">6.90460016972063023e-05</span> * days_per_year;
    mass[<span class="num">1</span>] = <span class="num">9.54791938424326609e-04</span> * solar_mass;
    x[<span class="num">2</span>] = <span class="num">8.34336671824457987e+00</span>;
    y[<span class="num">2</span>] = <span class="num">4.12479856412430479e+00</span>;
    z[<span class="num">2</span>] = -<span class="num">4.03523417114321381e-01</span>;
    vx[<span class="num">2</span>] = -<span class="num">2.76742510726862411e-03</span> * days_per_year;
    vy[<span class="num">2</span>] = <span class="num">4.99852801234917238e-03</span> * days_per_year;
    vz[<span class="num">2</span>] = <span class="num">2.30417297573763929e-05</span> * days_per_year;
    mass[<span class="num">2</span>] = <span class="num">2.85885980666130812e-04</span> * solar_mass;
    x[<span class="num">3</span>] = <span class="num">1.28943695621391310e+01</span>;
    y[<span class="num">3</span>] = -<span class="num">1.51111514016986312e+01</span>;
    z[<span class="num">3</span>] = -<span class="num">2.23307578892655734e-01</span>;
    vx[<span class="num">3</span>] = <span class="num">2.96460137564761618e-03</span> * days_per_year;
    vy[<span class="num">3</span>] = <span class="num">2.37847173959480950e-03</span> * days_per_year;
    vz[<span class="num">3</span>] = -<span class="num">2.96589568540237556e-05</span> * days_per_year;
    mass[<span class="num">3</span>] = <span class="num">4.36624404335156298e-05</span> * solar_mass;
    x[<span class="num">4</span>] = <span class="num">1.53796971148509165e+01</span>;
    y[<span class="num">4</span>] = -<span class="num">2.59193146099879641e+01</span>;
    z[<span class="num">4</span>] = <span class="num">1.79258772950371181e-01</span>;
    vx[<span class="num">4</span>] = <span class="num">2.68067772490389322e-03</span> * days_per_year;
    vy[<span class="num">4</span>] = <span class="num">1.62824170038242295e-03</span> * days_per_year;
    vz[<span class="num">4</span>] = -<span class="num">9.51592254519715870e-05</span> * days_per_year;
    mass[<span class="num">4</span>] = <span class="num">5.15138902046611451e-05</span> * solar_mass;
}
<span class="kwb">int</span> <span class="kwd">main</span>(<span class="kwb">int</span> argc, <span class="kwb">char</span> ** argv)
{
    <span class="kwb">int</span> n = <span class="kwd">atoi</span>(argv[<span class="num">1</span>]);
    <span class="kwd">init</span>();
    <span class="kwd">offset_momentum</span>();
    <span class="kwd">printf</span>(<span class="str">&quot;%.9f</span><span class="esc">\n</span><span class="str">&quot;</span>, <span class="kwd">energy</span>());
    <span class="kwd">advance</span>(n);
    <span class="kwd">printf</span>(<span class="str">&quot;%.9f</span><span class="esc">\n</span><span class="str">&quot;</span>, <span class="kwd">energy</span>());
    <span class="kwa">return</span> <span class="num">0</span>;
}
