<span class="slc">// The Computer Language Benchmarks Game</span>
<span class="slc">// https://salsa.debian.org/benchmarksgame-team/benchmarksgame/</span>
<span class="slc">//</span>
<span class="slc">// Contributed by Jeremy Zerfas</span>

<span class="ppc">#include &lt;stdlib.h&gt;</span>
<span class="ppc">#include &lt;stdio.h&gt;</span>
<span class="ppc">#include &lt;string.h&gt;</span>
<span class="ppc">#include &lt;pcre.h&gt;</span>

<span class="kwc">typedef</span> <span class="kwb">struct</span> {
    <span class="kwb">char</span> * data;
    <span class="kwb">int</span> capacity, size;
} string;


<span class="slc">// Function for searching a src_String for a pattern, replacing it with some</span>
<span class="slc">// specified replacement, and storing the result in dst_String.</span>
<span class="kwb">static void</span> <span class="kwd">replace</span>(<span class="kwb">char const</span> * <span class="kwb">const</span> pattern, <span class="kwb">char const</span> * <span class="kwb">const</span> replacement
  , string <span class="kwb">const</span> * <span class="kwb">const</span> src_String, string * <span class="kwb">const</span> dst_String
  , pcre_jit_stack * <span class="kwb">const</span> stack){

    <span class="kwb">char const</span> * error;
    <span class="kwb">int</span> offset, pos=<span class="num">0</span>, match[<span class="num">3</span>];
    <span class="kwb">int const</span> replacement_Size=<span class="kwd">strlen</span>(replacement);

    <span class="slc">// Compile and study pattern.</span>
    pcre * regex=<span class="kwd">pcre_compile</span>(pattern, <span class="num">0</span>, &amp;error, &amp;offset, NULL);
    pcre_extra * aid=<span class="kwd">pcre_study</span>(regex, PCRE_STUDY_JIT_COMPILE, &amp;error);

    <span class="slc">// Find each match of the pattern in src_String and append the characters</span>
    <span class="slc">// preceding each match and the replacement text to dst_String.</span>
    <span class="kwa">while</span>(<span class="kwd">pcre_jit_exec</span>(regex, aid, src_String-&gt;data, src_String-&gt;size
      , pos, <span class="num">0</span>, match, <span class="num">3</span>, stack)&gt;=<span class="num">0</span>){

        <span class="slc">// Allocate more memory for dst_String if there is not enough space for</span>
        <span class="slc">// the characters preceding the match and the replacement text.</span>
        <span class="kwa">while</span>(dst_String-&gt;size+match[<span class="num">0</span>]-pos+replacement_Size
          &gt;dst_String-&gt;capacity)
            dst_String-&gt;data=<span class="kwd">realloc</span>(dst_String-&gt;data, dst_String-&gt;capacity*=<span class="num">2</span>);

        <span class="slc">// Append the characters preceding the match and the replacement text to</span>
        <span class="slc">// dst_String and update the size of dst_String.</span>
        <span class="kwd">memcpy</span>(dst_String-&gt;data+dst_String-&gt;size, src_String-&gt;data+pos
          , match[<span class="num">0</span>]-pos);
        <span class="kwd">memcpy</span>(dst_String-&gt;data+dst_String-&gt;size+match[<span class="num">0</span>]-pos, replacement
          , replacement_Size);
        dst_String-&gt;size+=match[<span class="num">0</span>]-pos+replacement_Size;

        <span class="slc">// Update pos to continue searching after the current match.</span>
        pos=match[<span class="num">1</span>];
    }

    <span class="kwd">pcre_free_study</span>(aid);
    <span class="kwd">pcre_free</span>(regex);

    <span class="slc">// Allocate more memory for dst_String if there is not enough space for</span>
    <span class="slc">// the characters following the last match (or the entire src_String if</span>
    <span class="slc">// there was no match).</span>
    <span class="kwa">while</span>(dst_String-&gt;size+src_String-&gt;size-pos&gt;dst_String-&gt;capacity)
        dst_String-&gt;data=<span class="kwd">realloc</span>(dst_String-&gt;data, dst_String-&gt;capacity*=<span class="num">2</span>);

    <span class="slc">// Append the characters following the last match (or the entire src_String</span>
    <span class="slc">// if there was no match) to dst_String and update the size of dst_String.</span>
    <span class="kwd">memcpy</span>(dst_String-&gt;data+dst_String-&gt;size, src_String-&gt;data+pos
      , src_String-&gt;size-pos);
    dst_String-&gt;size+=src_String-&gt;size-pos;
}


<span class="kwb">int</span> <span class="kwd">main</span>(<span class="kwb">void</span>){
    <span class="kwb">char const</span> * <span class="kwb">const</span> count_Info[]={
        <span class="str">&quot;agggtaaa|tttaccct&quot;</span>,
        <span class="str">&quot;[cgt]gggtaaa|tttaccc[acg]&quot;</span>,
        <span class="str">&quot;a[act]ggtaaa|tttacc[agt]t&quot;</span>,
        <span class="str">&quot;ag[act]gtaaa|tttac[agt]ct&quot;</span>,
        <span class="str">&quot;agg[act]taaa|ttta[agt]cct&quot;</span>,
        <span class="str">&quot;aggg[acg]aaa|ttt[cgt]ccct&quot;</span>,
        <span class="str">&quot;agggt[cgt]aa|tt[acg]accct&quot;</span>,
        <span class="str">&quot;agggta[cgt]a|t[acg]taccct&quot;</span>,
        <span class="str">&quot;agggtaa[cgt]|[acg]ttaccct&quot;</span>
      }, * <span class="kwb">const</span> replace_Info[][<span class="num">2</span>]={
        {<span class="str">&quot;tHa[Nt]&quot;</span>, <span class="str">&quot;&lt;4&gt;&quot;</span>},
        {<span class="str">&quot;aND|caN|Ha[DS]|WaS&quot;</span>, <span class="str">&quot;&lt;3&gt;&quot;</span>},
        {<span class="str">&quot;a[NSt]|BY&quot;</span>, <span class="str">&quot;&lt;2&gt;&quot;</span>},
        {<span class="str">&quot;&lt;[^&gt;]*&gt;&quot;</span>, <span class="str">&quot;|&quot;</span>},
        {<span class="str">&quot;</span><span class="esc">\\</span><span class="str">|[^|][^|]*</span><span class="esc">\\</span><span class="str">|&quot;</span>, <span class="str">&quot;-&quot;</span>}
      };

    string input={<span class="kwd">malloc</span>(<span class="num">16384</span>), <span class="num">16384</span>}, sequences={<span class="kwd">malloc</span>(<span class="num">16384</span>), <span class="num">16384</span>};
    <span class="kwb">int</span> postreplace_Size;


    <span class="slc">// Read in input from stdin until we reach the end or encounter an error.</span>
    <span class="kwa">for</span>(<span class="kwb">int</span> bytes_Read;
      (bytes_Read=<span class="kwd">fread</span>(input.data+input.size, <span class="num">1</span>, input.capacity-input.size
      , stdin))&gt;<span class="num">0</span>;)
        <span class="slc">// Update the size of input to reflect the newly read input and if</span>
        <span class="slc">// we&apos;ve reached the full capacity of the input string then also double</span>
        <span class="slc">// its size.</span>
        <span class="kwa">if</span>((input.size+=bytes_Read)==input.capacity)
            input.data=<span class="kwd">realloc</span>(input.data, input.capacity*=<span class="num">2</span>);


    <span class="ppc">#pragma omp parallel</span>
    {
        pcre_jit_stack * <span class="kwb">const</span> stack=<span class="kwd">pcre_jit_stack_alloc</span>(<span class="num">16384</span>, <span class="num">16384</span>);


        <span class="slc">// Find all sequence descriptions and new lines in input, replace them</span>
        <span class="slc">// with empty strings, and store the result in the sequences string.</span>
        <span class="ppc">#pragma omp single</span>
        {
            <span class="kwd">replace</span>(<span class="str">&quot;&gt;.*</span><span class="esc">\\</span><span class="str">n|</span><span class="esc">\\</span><span class="str">n&quot;</span>, <span class="str">&quot;&quot;</span>, &amp;input, &amp;sequences, stack);

            <span class="kwd">free</span>(input.data);
        }


        <span class="slc">// Have one thread start working on performing all the replacements</span>
        <span class="slc">// serially.</span>
        <span class="ppc">#pragma omp single nowait</span>
        {
            <span class="slc">// We&apos;ll use two strings when doing all the replacements, searching</span>
            <span class="slc">// for patterns in prereplace_String and using postreplace_String to</span>
            <span class="slc">// store the string after the replacements have been made. After</span>
            <span class="slc">// each iteration these two then get swapped. Start out with both</span>
            <span class="slc">// strings having the same capacity as the sequences string and also</span>
            <span class="slc">// copy the sequences string into prereplace_String for the initial</span>
            <span class="slc">// iteration.</span>
            string prereplace_String={
                <span class="kwd">malloc</span>(sequences.capacity), sequences.capacity, sequences.size
              }, postreplace_String={
                <span class="kwd">malloc</span>(sequences.capacity), sequences.capacity
              };
            <span class="kwd">memcpy</span>(prereplace_String.data, sequences.data, sequences.size);

            <span class="slc">// Iterate through all the replacement patterns and their</span>
            <span class="slc">// replacements in replace_Info[].</span>
            <span class="kwa">for</span>(<span class="kwb">int</span> i=<span class="num">0</span>; i&lt;<span class="kwa">sizeof</span>(replace_Info)/<span class="kwa">sizeof</span>(<span class="kwb">char</span> * [<span class="num">2</span>]); i++){

                <span class="kwd">replace</span>(replace_Info[i][<span class="num">0</span>], replace_Info[i][<span class="num">1</span>]
                  , &amp;prereplace_String, &amp;postreplace_String, stack);

                <span class="slc">// Swap prereplace_String and postreplace_String in preparation</span>
                <span class="slc">// for the next iteration.</span>
                string <span class="kwb">const</span> temp=prereplace_String;
                prereplace_String=postreplace_String;
                postreplace_String=temp;

                postreplace_String.size=<span class="num">0</span>;
            }

            <span class="slc">// If any replacements were made, they&apos;ll be in prereplace_String</span>
            <span class="slc">// instead of postreplace_String because of the swap done after each</span>
            <span class="slc">// iteration. Copy its size to postreplace_Size.</span>
            postreplace_Size=prereplace_String.size;

            <span class="kwd">free</span>(prereplace_String.data);
            <span class="kwd">free</span>(postreplace_String.data);
        }


        <span class="slc">// Iterate through all the count patterns in count_Info[] and perform</span>
        <span class="slc">// the counting for each one on a different thread if available.</span>
        <span class="ppc">#pragma omp for schedule(dynamic) ordered</span>
        <span class="kwa">for</span>(<span class="kwb">int</span> i=<span class="num">0</span>; i&lt;<span class="kwa">sizeof</span>(count_Info)/<span class="kwa">sizeof</span>(<span class="kwb">char</span> *); i++){

            <span class="kwb">char const</span> * error;
            <span class="kwb">int</span> offset, pos=<span class="num">0</span>, match[<span class="num">3</span>], count=<span class="num">0</span>;

            <span class="slc">// Compile and study pattern.</span>
            pcre * regex=<span class="kwd">pcre_compile</span>(count_Info[i], <span class="num">0</span>, &amp;error, &amp;offset, NULL);
            pcre_extra * aid=<span class="kwd">pcre_study</span>(regex, PCRE_STUDY_JIT_COMPILE, &amp;error);

            <span class="slc">// Find each match of the pattern in the sequences string and</span>
            <span class="slc">// increment count for each match.</span>
            <span class="kwa">while</span>(<span class="kwd">pcre_jit_exec</span>(regex, aid, sequences.data, sequences.size
              , pos, <span class="num">0</span>, match, <span class="num">3</span>, stack)&gt;=<span class="num">0</span>){

                count++;

                <span class="slc">// Update pos to continue searching after the current match.</span>
                pos=match[<span class="num">1</span>];
            }

            <span class="kwd">pcre_free_study</span>(aid);
            <span class="kwd">pcre_free</span>(regex);

            <span class="slc">// Print the count for each pattern in the correct order.</span>
            <span class="ppc">#pragma omp ordered</span>
            <span class="kwd">printf</span>(<span class="str">&quot;%s %d</span><span class="esc">\n</span><span class="str">&quot;</span>, count_Info[i], count);
        }


        <span class="kwd">pcre_jit_stack_free</span>(stack);
    }


    <span class="kwd">free</span>(sequences.data);

    <span class="slc">// Print the size of the original input, the size of the input without the</span>
    <span class="slc">// sequence descriptions &amp; new lines, and the size after having made all the</span>
    <span class="slc">// replacements.</span>
    <span class="kwd">printf</span>(<span class="str">&quot;</span><span class="esc">\n</span><span class="str">%d</span><span class="esc">\n</span><span class="str">%d</span><span class="esc">\n</span><span class="str">%d</span><span class="esc">\n</span><span class="str">&quot;</span>, input.size, sequences.size, postreplace_Size);
    <span class="kwa">return</span> <span class="num">0</span>;
}
